'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _tmp = require('tmp');

var _tmp2 = _interopRequireDefault(_tmp);

var _endpointUtils = require('endpoint-utils');

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createTempUserDataDir() {
    _tmp2.default.setGracefulCleanup();

    return _tmp2.default.dirSync({ unsafeCleanup: true });
}

exports.default = function () {
    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(configString) {
        var config, tempUserDataDir, cdpPort;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        config = (0, _config2.default)(configString);
                        tempUserDataDir = createTempUserDataDir();
                        _context.t0 = config.cdpPort;

                        if (_context.t0) {
                            _context.next = 7;
                            break;
                        }

                        _context.next = 6;
                        return (0, _endpointUtils.getFreePort)();

                    case 6:
                        _context.t0 = _context.sent;

                    case 7:
                        cdpPort = _context.t0;
                        return _context.abrupt('return', { config: config, cdpPort: cdpPort, tempUserDataDir: tempUserDataDir });

                    case 9:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this);
    }));

    return function (_x) {
        return _ref.apply(this, arguments);
    };
}();

module.exports = exports['default'];