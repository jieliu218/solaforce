'use strict';

exports.__esModule = true;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _isNan = require('babel-runtime/core-js/number/is-nan');

var _isNan2 = _interopRequireDefault(_isNan);

exports.default = function (configString) {
    if (!configCache[configString]) configCache[configString] = getNewConfig(configString);

    return configCache[configString];
};

var _chromeEmulatedDevicesList = require('chrome-emulated-devices-list');

var _chromeEmulatedDevicesList2 = _interopRequireDefault(_chromeEmulatedDevicesList);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HEADLESS_DEFAULT_WIDTH = 1280;
var HEADLESS_DEFAULT_HEIGHT = 800;

var CONFIG_TERMINATOR_RE = /(\s+|^)-/;

var configCache = {};

function hasMatch(array, re) {
    return !!(0, _lodash.find)(array, function (el) {
        return el.match(re);
    });
}

function findMatch(array, re) {
    var element = (0, _lodash.find)(array, function (el) {
        return el.match(re);
    });

    return element ? element.match(re)[1] : '';
}

function isMatchTrue(array, re) {
    var match = findMatch(array, re);

    return match && match !== '0' && match !== 'false';
}

function splitEscaped(str, splitterChar) {
    var result = [''];

    for (var i = 0; i < str.length; i++) {
        if (str[i] === splitterChar) {
            result.push('');
            continue;
        }

        if (str[i] === '\\' && (str[i + 1] === '\\' || str[i + 1] === splitterChar)) i++;

        result[result.length - 1] += str[i];
    }

    return result;
}

function parseConfig(str) {
    var configTerminatorMatch = str.match(CONFIG_TERMINATOR_RE);

    if (!configTerminatorMatch) return { modesString: str, userArgs: '' };

    return {
        modesString: str.substr(0, configTerminatorMatch.index),
        userArgs: str.substr(configTerminatorMatch.index + configTerminatorMatch[1].length)
    };
}

function getPathFromParsedModes(modesList) {
    if (!modesList.length) return '';

    if (modesList[0] === 'headless' || modesList[0] === 'emulation') return '';

    var path = modesList.shift();

    if (_osFamily2.default.win && modesList.length && path.match(/^[A-Za-z]$/)) path += ':' + modesList.shift();

    return path;
}

function parseModes(str) {
    var parsed = splitEscaped(str, ':');
    var path = getPathFromParsedModes(parsed);
    var nextMode = parsed.shift();
    var hasHeadless = nextMode === 'headless';

    if (hasHeadless) nextMode = parsed.shift();

    var hasEmulation = nextMode === 'emulation';

    if (hasEmulation) nextMode = parsed.shift();

    while (parsed.length) {
        nextMode += ':' + parsed.shift();
    }var modes = {
        path: path,
        headless: hasHeadless,
        emulation: hasEmulation || hasHeadless
    };

    return { modes: modes, optionsString: nextMode || '' };
}

function simplifyDeviceName(deviceName) {
    return deviceName.replace(/\s/g, '').toLowerCase();
}

function findDevice(deviceName) {
    var simpleName = simplifyDeviceName(deviceName);

    return _chromeEmulatedDevicesList2.default.filter(function (device) {
        return simplifyDeviceName(device.title).indexOf(simpleName) >= 0;
    })[0];
}

function getDeviceBasedOptions(deviceName, orientation) {
    if (!deviceName) return {};

    var deviceData = findDevice(deviceName);

    if (!deviceData) return {};

    var mobile = deviceData.capabilities.indexOf('mobile') >= 0;

    if (!orientation) orientation = mobile ? 'vertical' : 'horizontal';

    return {
        mobile: mobile,
        orientation: orientation,
        touch: deviceData.capabilities.indexOf('touch') >= 0,
        width: deviceData.screen[orientation].width,
        height: deviceData.screen[orientation].height,
        scaleFactor: deviceData.screen['device-pixel-ratio'],
        userAgent: deviceData['user-agent']
    };
}

function parseOptions(str, modes) {
    var parsed = splitEscaped(str, ';');

    var baseOptions = {
        width: modes.headless ? HEADLESS_DEFAULT_WIDTH : 0,
        height: modes.headless ? HEADLESS_DEFAULT_HEIGHT : 0,
        scaleFactor: 0,
        mobile: false,
        cdpPort: findMatch(parsed, /^cdpPort=(.*)/)
    };

    var deviceName = findMatch(parsed, /^device=(.*)/);
    var orientation = findMatch(parsed, /^orientation=(.*)/);
    var deviceBasedOptions = getDeviceBasedOptions(deviceName, orientation);

    var specifiedDeviceOptions = {
        orientation: orientation,
        touch: hasMatch(parsed, /^touch=/) ? isMatchTrue(parsed, /^touch=(.*)/) : void 0,
        mobile: isMatchTrue(parsed, /^mobile=(.*)/),
        width: Number(findMatch(parsed, /^width=(.*)/) || NaN),
        height: Number(findMatch(parsed, /^height=(.*)/) || NaN),
        scaleFactor: Number(findMatch(parsed, /^scaleFactor=(.*)/) || NaN),
        userAgent: findMatch(parsed, /^userAgent=(.*)/)
    };

    specifiedDeviceOptions = (0, _lodash.pickBy)(specifiedDeviceOptions, function (optionValue) {
        return optionValue !== void 0 && optionValue !== '' && !(0, _isNan2.default)(optionValue);
    });

    return (0, _assign2.default)(baseOptions, deviceBasedOptions, specifiedDeviceOptions);
}

function getNewConfig(configString) {
    var _parseConfig = parseConfig(configString),
        userArgs = _parseConfig.userArgs,
        modesString = _parseConfig.modesString;

    var _parseModes = parseModes(modesString),
        modes = _parseModes.modes,
        optionsString = _parseModes.optionsString;

    var options = parseOptions(optionsString, modes);

    return (0, _assign2.default)({ userArgs: userArgs }, modes, options);
}

module.exports = exports['default'];