'use strict';

exports.__esModule = true;
exports.stop = exports.start = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var killChrome = function () {
    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(cdpPort) {
        var chromeOptions, chromeProcess;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        chromeOptions = { arguments: '--remote-debugging-port=' + cdpPort };
                        _context.next = 3;
                        return (0, _promisifiedFunctions.findProcess)(chromeOptions);

                    case 3:
                        chromeProcess = _context.sent;

                        if (chromeProcess.length) {
                            _context.next = 6;
                            break;
                        }

                        return _context.abrupt('return', true);

                    case 6:
                        _context.prev = 6;
                        _context.next = 9;
                        return (0, _promisifiedFunctions.killProcess)(chromeProcess[0].pid, { timeout: BROWSER_CLOSING_TIMEOUT });

                    case 9:
                        return _context.abrupt('return', true);

                    case 12:
                        _context.prev = 12;
                        _context.t0 = _context['catch'](6);
                        return _context.abrupt('return', false);

                    case 15:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this, [[6, 12]]);
    }));

    return function killChrome(_x) {
        return _ref.apply(this, arguments);
    };
}();

var start = exports.start = function () {
    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(pageUrl, _ref3) {
        var browserName = _ref3.browserName,
            config = _ref3.config,
            cdpPort = _ref3.cdpPort,
            tempUserDataDir = _ref3.tempUserDataDir;
        var chromeInfo, chromeOpenParameters;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        chromeInfo = null;

                        if (!config.path) {
                            _context2.next = 7;
                            break;
                        }

                        _context2.next = 4;
                        return _testcafeBrowserTools2.default.getBrowserInfo(config.path);

                    case 4:
                        chromeInfo = _context2.sent;
                        _context2.next = 10;
                        break;

                    case 7:
                        _context2.next = 9;
                        return _testcafeBrowserTools2.default.getBrowserInfo(browserName);

                    case 9:
                        chromeInfo = _context2.sent;

                    case 10:
                        chromeOpenParameters = (0, _assign2.default)({}, chromeInfo);


                        chromeOpenParameters.cmd = buildChromeArgs(config, cdpPort, chromeOpenParameters.cmd, tempUserDataDir);

                        _context2.next = 14;
                        return _testcafeBrowserTools2.default.open(chromeOpenParameters, pageUrl);

                    case 14:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, this);
    }));

    return function start(_x2, _x3) {
        return _ref2.apply(this, arguments);
    };
}();

var stop = exports.stop = function () {
    var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(_ref5) {
        var cdpPort = _ref5.cdpPort;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        _context3.next = 2;
                        return killChrome(cdpPort);

                    case 2:
                        if (_context3.sent) {
                            _context3.next = 5;
                            break;
                        }

                        _context3.next = 5;
                        return killChrome(cdpPort);

                    case 5:
                    case 'end':
                        return _context3.stop();
                }
            }
        }, _callee3, this);
    }));

    return function stop(_x4) {
        return _ref4.apply(this, arguments);
    };
}();

var _testcafeBrowserTools = require('testcafe-browser-tools');

var _testcafeBrowserTools2 = _interopRequireDefault(_testcafeBrowserTools);

var _promisifiedFunctions = require('../../../../utils/promisified-functions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BROWSER_CLOSING_TIMEOUT = 5;

function buildChromeArgs(config, cdpPort, platformArgs, userDataDir) {
    return ['--remote-debugging-port=' + cdpPort, '--user-data-dir=' + userDataDir.name].concat(config.headless ? ['--headless'] : [], config.userArgs ? [config.userArgs] : [], platformArgs ? [platformArgs] : []).join(' ');
}