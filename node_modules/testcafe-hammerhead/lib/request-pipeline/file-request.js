'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _mime = require('mime');

var _mime2 = _interopRequireDefault(_mime);

var _events = require('events');

var _url = require('url');

var _messages = require('../messages');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DISK_RE = /^\/[A-Za-z]:/;

var FileRequest = function (_EventEmitter) {
    (0, _inherits3.default)(FileRequest, _EventEmitter);

    function FileRequest(opts) {
        (0, _classCallCheck3.default)(this, FileRequest);

        var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));

        var parsedUrl = (0, _url.parse)(opts.url);
        var path = decodeURIComponent(parsedUrl.pathname);

        if (DISK_RE.test(path)) path = path.substr(1);

        _this.url = opts.url;
        _this.stream = _fs2.default.createReadStream(path);
        _this.headers = {};
        _this.trailers = {};
        _this.path = path;

        _this.stream.once('readable', function () {
            return _this._onOpen();
        });
        _this.stream.on('error', function (err) {
            return _this._onError(err);
        });
        return _this;
    }

    FileRequest.prototype._onError = function _onError(err) {
        this.statusCode = 404;
        this.emit('fatalError', (0, _messages.getText)(_messages.MESSAGE.cantReadFile, this.url, err.message));
    };

    FileRequest.prototype._onOpen = function _onOpen() {
        this.statusCode = 200;
        this.headers['content-type'] = _mime2.default.lookup(this.path);

        this.emit('response', this);
    };

    FileRequest.prototype.on = function on(type, handler) {
        var _this2 = this;

        if (type === 'data' || type === 'end') {
            if (this.statusCode !== 404) {
                this.stream.on(type, handler);

                if (type === 'end') this.stream.on(type, function () {
                    return _this2.stream.close();
                });
            } else if (type === 'end') handler.call(this);
        } else _EventEmitter.prototype.on.call(this, type, handler);
    };

    FileRequest.prototype.pipe = function pipe(res) {
        if (this.statusCode === 404) res.end('');else this.stream.pipe(res);
    };

    return FileRequest;
}(_events.EventEmitter);

exports.default = FileRequest;
module.exports = exports['default'];