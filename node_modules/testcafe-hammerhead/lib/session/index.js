'use strict';

exports.__esModule = true;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _mustache = require('mustache');

var _mustache2 = _interopRequireDefault(_mustache);

var _shortid = require('shortid');

var _shortid2 = _interopRequireDefault(_shortid);

var _readFileRelative = require('read-file-relative');

var _events = require('events');

var _url = require('url');

var _cookies = require('./cookies');

var _cookies2 = _interopRequireDefault(_cookies);

var _storage = require('../upload/storage');

var _storage2 = _interopRequireDefault(_storage);

var _command = require('./command');

var _command2 = _interopRequireDefault(_command);

var _url2 = require('../utils/url');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Const
var TASK_TEMPLATE = (0, _readFileRelative.readSync)('../client/task.js.mustache');

// Session

var Session = function (_EventEmitter) {
    (0, _inherits3.default)(Session, _EventEmitter);

    function Session(uploadsRoot) {
        (0, _classCallCheck3.default)(this, Session);

        var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));

        _this.uploadStorage = new _storage2.default(uploadsRoot);

        _this.id = Session._generateSessionId();
        _this.cookies = new _cookies2.default();
        _this.proxy = null;
        _this.externalProxySettings = null;
        _this.pageLoadCount = 0;

        _this.requireStateSwitch = false;
        _this.pendingStateSnapshot = null;

        _this.injectable = {
            scripts: ['/hammerhead.js'],
            styles: []
        };
        return _this;
    }

    Session._generateSessionId = function _generateSessionId() {
        // NOTE: GH-116
        return _shortid2.default.generate();
    };

    // State


    Session.prototype.getStateSnapshot = function getStateSnapshot() {
        return {
            cookies: this.cookies.serializeJar(),
            storages: null
        };
    };

    Session.prototype.useStateSnapshot = function useStateSnapshot(snapshot) {
        // NOTE: we don't perform state switch immediately, since there might be
        // pending requests from current page. Therefore, we perform switch in
        // onPageRequest handler when new page is requested.
        this.requireStateSwitch = true;
        this.pendingStateSnapshot = snapshot || {
            cookies: null,
            storages: {
                localStorage: '[[],[]]',
                sessionStorage: '[[],[]]'
            }
        };
    };

    Session.prototype.handleServiceMessage = function () {
        var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(msg, serverInfo) {
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            if (!this[msg.cmd]) {
                                _context.next = 4;
                                break;
                            }

                            _context.next = 3;
                            return this[msg.cmd](msg, serverInfo);

                        case 3:
                            return _context.abrupt('return', _context.sent);

                        case 4:
                            throw new Error('Malformed service message or message handler is not implemented');

                        case 5:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        function handleServiceMessage(_x, _x2) {
            return _ref.apply(this, arguments);
        }

        return handleServiceMessage;
    }();

    Session.prototype._fillTaskScriptTemplate = function _fillTaskScriptTemplate(serverInfo, isFirstPageLoad, referer, cookie, iframeTaskScriptTemplate, payloadScript) {
        referer = referer === null ? '{{{referer}}}' : referer;
        cookie = cookie === null ? '{{{cookie}}}' : cookie;

        iframeTaskScriptTemplate = iframeTaskScriptTemplate === null ? '{{{iframeTaskScriptTemplate}}}' : iframeTaskScriptTemplate;

        return _mustache2.default.render(TASK_TEMPLATE, {
            sessionId: this.id,
            serviceMsgUrl: serverInfo.domain + '/messaging',
            ie9FileReaderShimUrl: serverInfo.domain + '/ie9-file-reader-shim',
            cookieSyncUrl: serverInfo.domain + '/cookie-sync',
            crossDomainPort: serverInfo.crossDomainPort,
            isFirstPageLoad: isFirstPageLoad,
            referer: referer,
            cookie: cookie,
            iframeTaskScriptTemplate: iframeTaskScriptTemplate,
            payloadScript: payloadScript
        });
    };

    Session.prototype.getIframeTaskScriptTemplate = function getIframeTaskScriptTemplate(serverInfo) {
        return (0, _stringify2.default)(this._fillTaskScriptTemplate(serverInfo, false, null, null, null, this._getIframePayloadScript(true)));
    };

    Session.prototype.getTaskScript = function getTaskScript(referer, cookieUrl, serverInfo, isIframe, withPayload) {
        var cookies = (0, _stringify2.default)(this.cookies.getClientString(cookieUrl));
        var payloadScript = '';

        if (withPayload) payloadScript = isIframe ? this._getIframePayloadScript() : this._getPayloadScript();

        var taskScript = this._fillTaskScriptTemplate(serverInfo, this.pageLoadCount === 0, referer, cookies, this.getIframeTaskScriptTemplate(serverInfo), payloadScript);

        this.pageLoadCount++;

        return taskScript;
    };

    Session.prototype.setExternalProxySettings = function setExternalProxySettings(proxyUrl) {
        var parsedUrl = typeof proxyUrl === 'string' ? (0, _url.parse)('http://' + proxyUrl) : null;
        var settings = null;

        if (parsedUrl && parsedUrl.host) {
            settings = {
                host: parsedUrl.host,
                hostname: parsedUrl.hostname
            };

            if (parsedUrl.port) settings.port = parsedUrl.port;

            if (parsedUrl.auth) {
                settings.proxyAuth = parsedUrl.auth;
                settings.authHeader = 'Basic ' + new Buffer(parsedUrl.auth).toString('base64');
            }
        }

        this.externalProxySettings = settings;
    };

    Session.prototype.onPageRequest = function onPageRequest(ctx) {
        if (this.requireStateSwitch) {
            this.cookies.setJar(this.pendingStateSnapshot.cookies);
            ctx.restoringStorages = this.pendingStateSnapshot.storages;
            this.requireStateSwitch = false;
            this.pendingStateSnapshot = null;
        }
    };

    Session.prototype.setCookie = function setCookie(queue) {
        for (var _iterator = queue, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
            var _ref2;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref2 = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref2 = _i.value;
            }

            var msg = _ref2;

            var parsedUrl = (0, _url2.parseProxyUrl)(msg.url);
            var cookieUrl = parsedUrl ? parsedUrl.destUrl : msg.url;

            this.cookies.setByClient(cookieUrl, msg.cookie);
        }
    };

    Session.prototype._getIframePayloadScript = function _getIframePayloadScript() /* iframeWithoutSrc */{
        throw new Error('Not implemented');
    };

    Session.prototype._getPayloadScript = function _getPayloadScript() {
        throw new Error('Not implemented');
    };

    Session.prototype.handleFileDownload = function handleFileDownload() /* ctx */{
        throw new Error('Not implemented');
    };

    Session.prototype.handlePageError = function handlePageError() /* ctx, err */{
        throw new Error('Not implemented');
    };

    Session.prototype.getAuthCredentials = function getAuthCredentials() {
        throw new Error('Not implemented');
    };

    return Session;
}(_events.EventEmitter);

// Service message handlers


exports.default = Session;
var ServiceMessages = Session.prototype;

ServiceMessages[_command2.default.uploadFiles] = function () {
    var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(msg) {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        _context2.next = 2;
                        return this.uploadStorage.store(msg.fileNames, msg.data);

                    case 2:
                        return _context2.abrupt('return', _context2.sent);

                    case 3:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, this);
    }));

    return function (_x3) {
        return _ref3.apply(this, arguments);
    };
}();

ServiceMessages[_command2.default.getUploadedFiles] = function () {
    var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(msg) {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        _context3.next = 2;
                        return this.uploadStorage.get(msg.filePaths);

                    case 2:
                        return _context3.abrupt('return', _context3.sent);

                    case 3:
                    case 'end':
                        return _context3.stop();
                }
            }
        }, _callee3, this);
    }));

    return function (_x4) {
        return _ref4.apply(this, arguments);
    };
}();
module.exports = exports['default'];